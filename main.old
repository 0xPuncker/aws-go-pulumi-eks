package main

import (
	"errors"
	"flag"
	"log"
	"os"
	"strconv"

	"github.com/joho/godotenv"
	"github.com/pulumi/pulumi-awsx/sdk/go/awsx/ec2"
	"github.com/pulumi/pulumi-eks/sdk/go/eks"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	
	appsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apps/v1"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"

)

var (
	VPC_NAME          = "vpc-eks"
	EKS_PROVIDER_NAME = "eks-provider"
	EKS_CLUSTER_NAME  = "eks-cluster"
	IMAGE_NAME        = "mercybassey/node-service"
	IMAGE_TAG         = "latest"
	NAMESPACE_NAME    = "node"
	DEPLOYMENT_NAME   = "my-app"
	CONTAINER_PORT    = "8080"
)

func Setup() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	flag.StringVar(&VPC_NAME, "vpc-name", os.Getenv("VPC_NAME"), "The name of the VPC")
	flag.StringVar(&EKS_PROVIDER_NAME, "eks-provider-name", os.Getenv("EKS_PROVIDER_NAME"), "The name of the EKS provider")
	flag.StringVar(&EKS_CLUSTER_NAME, "eks-cluster-name", EKS_CLUSTER_NAME, "The name of the EKS cluster")
	flag.StringVar(&IMAGE_NAME, "image-name", os.Getenv("IMAGE_NAME"), "The name of the image")
	flag.StringVar(&IMAGE_TAG, "image-tag", os.Getenv("IMAGE_TAG"), "The tag of the image")
	flag.StringVar(&NAMESPACE_NAME, "namespace-name", NAMESPACE_NAME, "The name of the namespace")
	flag.StringVar(&DEPLOYMENT_NAME, "deployment-name", DEPLOYMENT_NAME, "The name of the deployment")
	flag.StringVar(&CONTAINER_PORT, "container-port", os.Getenv("CONTAINER_PORT"), "The port of the container")
	flag.Parse()
}

func main() {
	Setup()
	if VPC_NAME == "" {
		panic(errors.New("A value is required for environment variable `VPC_NAME is required`"))
	}
	if EKS_PROVIDER_NAME == "" {
		panic(errors.New("A value is required for environment variable `EKS_PROVIDER_NAME is required`"))
	}
	if EKS_CLUSTER_NAME == "" {
		panic(errors.New("A value is required for environment variable `EKS_CLUSTER_NAME is required`"))
	}
	if IMAGE_NAME == "" {
		panic(errors.New("A value is required for environment variable `IMAGE_NAME is required`"))
	}
	if IMAGE_TAG == "" {
		panic(errors.New("A value is required for environment variable `IMAGE_TAG is required`"))
	}
	if NAMESPACE_NAME == "" {
		panic(errors.New("A value is required for environment variable `NAMESPACE_NAME is required`"))
	}
	if DEPLOYMENT_NAME == "" {
		panic(errors.New("A value is required for environment variable `DEPLOYMENT_NAME is required`"))
	}
	if CONTAINER_PORT == "" {
		panic(errors.New("A value is required for environment variable `CONTAINER_PORT is required`"))
	}	
	
	pulumi.Run(func(ctx *pulumi.Context) error {
		imageName := IMAGE_NAME
        imageTag := IMAGE_TAG
        imageUrl := imageName + ":" + imageTag

		vpc, err := ec2.NewVpc(ctx, VPC_NAME, nil)
		if err != nil {
			return err
		}
		eksCluster, err := eks.NewCluster(ctx, EKS_CLUSTER_NAME,
			&eks.ClusterArgs{
				Name:                         pulumi.String(EKS_CLUSTER_NAME),
				VpcId:                        vpc.VpcId,
				PublicSubnetIds:              vpc.PublicSubnetIds,
				PrivateSubnetIds:             vpc.PrivateSubnetIds,
				NodeAssociatePublicIpAddress: pulumi.BoolRef(false),
			})
		if err != nil {
			return err
		}

		eksProvider, err := kubernetes.NewProvider(ctx, EKS_PROVIDER_NAME, &kubernetes.ProviderArgs{
			Kubeconfig: eksCluster.KubeconfigJson,
		})
		if err != nil {
			return err
		}
		namespace, err := corev1.NewNamespace(ctx, NAMESPACE_NAME, &corev1.NamespaceArgs{
			Metadata: &metav1.ObjectMetaArgs{
				Name: pulumi.String(NAMESPACE_NAME),
				Labels: pulumi.StringMap{
					"name": pulumi.String(NAMESPACE_NAME),
				},
			},
		})
		if err != nil {
			return err
		}
		containerPort, err := strconv.Atoi(CONTAINER_PORT)
		if err != nil {
			return err
		}
		deployment, err := appsv1.NewDeployment(ctx, DEPLOYMENT_NAME, &appsv1.DeploymentArgs{
			Metadata: &metav1.ObjectMetaArgs{
				Name:      pulumi.String(DEPLOYMENT_NAME),
				Namespace: pulumi.String(NAMESPACE_NAME),
			},
			Spec: &appsv1.DeploymentSpecArgs{
				Replicas: pulumi.Int(1),
				Selector: &metav1.LabelSelectorArgs{
					MatchLabels: pulumi.StringMap{
						"app": pulumi.String(DEPLOYMENT_NAME),
					},
				},
				Template: &corev1.PodTemplateSpecArgs{
					Metadata: &metav1.ObjectMetaArgs{
						Labels: pulumi.StringMap{
							"app": pulumi.String(DEPLOYMENT_NAME),
						},
					},
					Spec: &corev1.PodSpecArgs{
						Containers: corev1.ContainerArray{
							&corev1.ContainerArgs{
								Name:  pulumi.String(DEPLOYMENT_NAME),
								Image: pulumi.String(imageUrl),
								Ports: corev1.ContainerPortArray{
									&corev1.ContainerPortArgs{
										ContainerPort: pulumi.Int(containerPort),
									},
								},
							},
						},
					},
				},
			},
		}, pulumi.Provider(eksProvider))
		if err != nil {
			return err
		}
		ctx.Export("kubeconfig", eksCluster.Kubeconfig)
		ctx.Export("namespace", namespace.Metadata.Elem().Name())
		ctx.Export("deployment", deployment.Metadata.Elem().Name())

		return nil
	})
}
